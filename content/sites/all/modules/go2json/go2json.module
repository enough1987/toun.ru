<?php
/**
 * @file
 * Modules that sets up a menucallback to get data in JSON format (preferably by AJAX)
 * 
 * @author Antwan van der Mooren <antwan.van.der.mooren@dpdk.nl>
 */

/**
 * Help hook to add custom help text to help pages
 * 
 * @param string $path
 * @param array $arg
 * @return string
 */
 
 
 
 
 
 
 

function go2json_help($path, $arg) {
  switch ($path) {
    case "admin/help#go2json" :
      // Load information out of HELP_HTML.txt file (same text as on project on drupal.org)
      // Also, same text as README.txt but HTML formatted
      $help_text = file_get_contents( drupal_get_path( "module", "go2json" ) . "/HELP_HTML.txt" );
      return nl2br( $help_text );
  }
}

/**
 * Permission Hook to give the application access to this module
 * 
 * @return array
 */
function go2json_permission() {
  return array(
    'access go2json content' => array(
      'title' => t( 'Access Content as JSON content' ), 
      'description' => t( 'Use the go2json menu callbacks to retrieve data in JSON format' ) 
    ) 
  );
}


function rr(&$ar, $key) {
    
	foreach($ar as $k => $v) {
    if ($k == $key) $result[$key] = null;
    if (is_array($ar[$k])) rr($v, $key);
    }
	var_dump($ar);
    	
}

/**
 * Menu hook to add custom menus to Drupal environment
 * 
 * @return array
 */
function go2json_menu() {
  $items ['go2json/%/%'] = array(
    'page callback' => 'go2json_get_data', 
    'page arguments' => array(
      1, 
      2 
    ), 
    'access arguments' => array(
      'access go2json content' 
    ), 
    'type' => MENU_CALLBACK 
  );
  
  return $items;
}



/**
 * Get a node by a menucallback and return as JSON
 * 
 * @param string $type The type of content (node, comment, taxonomy_term, taxonomy_vocabulary, custom_data)
 * @param int $nid     ID of content to GET, give 0 as default
 */
function go2json_get_data($type, $id) {
  switch ($type) {
    case "node" :
      $data = _go2json_get_node( $id );
      break;
    
    case "comment" :
      $data = _go2json_get_comment( $id );
      break;
  case "comment_add" :
      $data = _go2json_add_comment( $id );
      break;
    case "menu" :
      $data = _go2json_get_menu( $id );
      break;
    
    case "term" :
      $data = _go2json_get_taxonomy_term( $id );
      break;
    
    case "taxonomy" :
      $data = _go2json_get_taxonomy_vocabulary( $id );
      break;
    
    case "custom_data" :
      $data = _go2json_get_custom_data();
      break;
    case "theme_setting" :
      $data = _go2json_get_theme_setting();
      break;
	  
	case "first" :
      $data = _go2json_first_request( $id );
      break;  
	 
	case "perfomance" :
      $data = _go2json_perfomance( $id );
      break;
	
	case "projects" :
      $data = _go2json_projects( $id );
      break;
	
	case "festival" :
      $data = _go2json_festival( $id );
      break;
	
    default :
      $data = _go2json_get_error_message_type( $type );
      break;
  }
  
  // If false (no data object returned), generate return message
  $data = ($data == FALSE ? _go2json_get_error_message_id( $id ) : $data);
  
  //drupal_json_output( $data );
  //JSONprint($data);
	//$out = array();
	$out = (array)$data;
	(array)$out;
	//rr($out,'safe_value');

	$replace = json_encode($out, JSON_HEX_QUOT|JSON_UNESCAPED_UNICODE);
	$replace = str_replace("\"ru\"","\"field_lang_ru\"",$replace);
	$replace = str_replace("\"en\"","\"field_lang_en\"",$replace);
	$replace = str_replace("\"Kh\"","\"field_lang_kh\"",$replace);
	$replace = str_replace("\"Mn\"","\"field_lang_mns\"",$replace);
	$replace = str_replace("http:\/\/toun.ru\/","/",$replace);
	$replace = str_replace("\u0022","'",$replace);
	$replace = str_replace("public:\/\/","\/content\/sites\/default\/files\/",$replace);
	

	
	
	

	echo $replace;
	
	
}

function _go2json_add_comment($id) {
  
  
  $name = $_POST["name"];
  $post = $_POST["text"];
  
 $comment = (object) array(
    'nid' => $id,
    'cid' => 0,
    'pid' => 0,
    'uid' => 1,
    'mail' => '',
	'name' => $name,
    'is_anonymous' => 0,
    'homepage' => '',
    'status' => '0',
    'subject' => 'dsk subject',
    'language' => "ru",
    'comment_body' => array(
      LANGUAGE_NONE => array(
        0 => array (
          'value' => $text,
          'format' => 'filtered_html'
        )
      )
    ),
  );

  comment_submit($comment);
  comment_save($comment);

 exit("die");
 return true;
	
	
	
}
	// function add_comments($nid, $name, )
	//	#Записать строчку в таблицу
	//{
    //    $sql = mysql_query("INSERT INTO `smart_order` (order_id, order_text, summ, sale, order_date, cart_dump, delivery_type, delivery_price, ip, name, surname, adress, phone, city, message, id_resto) VALUES (''".$order_id."', '".$order_text."', '".$summ."', '".$sale."', '".$order_date."', '".$cart_dump."','".$delivery_type."', '".$delivery_price."', '".$ip."', '".$name."', '".$surname."', '".$adress."', '".$phone."', '".$city."', '".$message."', '".$id_resto."')") or die (mysql_error());
	//	return true;
   // }
	

/*
function _go2json_add_comment($id) {


  $name = $_GET["name"];
  $post = $_GET["text"];

$comment->nid = $id; // nid of a node you want to attach a comment to
$comment->cid = 0; // leave it as is
$comment->pid = 0; // parent comment id, 0 if none 
$comment->uid = 1; // user's id, who left the comment
$comment->mail = 'email@example.com'; // user's email
$comment->name = $name // If user is authenticated you can omit this field, it will be auto-populated, if the user is anonymous and you want to name him somehow, input his name here
$comment->thread = '01/'; // OPTIONAL. If you need comments to be threaded you can fill this value. Otherwise omit it.
$comment->hostname = '127.0.01' // OPTIONAL. You can log poster's ip here
$comment->created = time(); // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
$comment->is_anonymous = 0; // leave it as is
$comment->homepage = ''; // you can add homepage URL here
$comment->status = COMMENT_PUBLISHED; // We auto-publish this comment
$comment->language = LANGUAGE_NONE; // The same as for a node
$comment->subject = 'Comment subject'; 
$comment->comment_body[$comment->language][0]['value'] = $post; // Everything here is pretty much like with a node
$comment->comment_body[$comment->language][0]['format'] = 'filtered_html'; 
$comment->field_custom_field_name[LANGUAGE_NONE][0]['value'] = &lsquo;Some value&rsquo;; // OPTIONAL. If your comment has a custom field attached it can added as simple as this // preparing a comment for a save
comment_submit($comment); // saving a comment
comment_save($comment);

 
  return true;
}
*/



function _go2json_year_filter( $link ) {
	$input = json_decode(file_get_contents('http://toun.ru/content/ru/' . $link), true);
	//print_r($input['items']); 
	

	$out2 = array();
	foreach ($input['items'] as $value)
	{
		$y = $value['item']['sort'];
		$link = "#" . $y;
		$lang = $y;
		$years['link'][$y][0] =  array('value'=>$link);
		$years['lang'][$y][0] =  array('value'=>$lang);
	
		 
	$out = array();
	
	foreach ($years['link'] as $value)
	{
		$und = array('und' => $value);
		$out['field_link'] = $und;
		
		
	}
		foreach ($years['lang'] as $value)
	{
		$und = array('und' => $value);
		$out['field_lang_ru'] = $und;
		$out['field_lang_en'] = $und;
	
		
	}
	array_push($out2, $out);
	//
	
}	
	//exit();
	return $out2;
	
}


function _go2json_projects( $id ) {
	
	if ( $id == "repertuar")
	{
		$projects['static']['field_lang_en']['title'] = "Репертуар";
		$projects['static']['field_lang_ru']['title'] = "Repertuar";
		$projects['static']['field_lang_kh']['title'] = "переовод:KH";
		$projects['static']['field_lang_mns']['title'] = "Перевод:MNS";
		$projects['widget'] =_go2json_glue_page('repertuar');
		$projects['filter_menu'] = _go2json_year_filter('repertuar');
		$projects['seo']["field_lang_en"]['title'] = "Repertuar";
		$projects['seo']["field_lang_ru"]['title'] = "Репертуар";
		$projects['seo']["field_lang_ru"]['description'] = "Репертуар театра СОЛНЦЕ";
		$projects['seo']["field_lang_en"]['description'] = "repertuar thetre SUN";
	}
	
	
	if ( $id == "new")
	{
		$projects['static']['field_lang_en']['title'] = "Новые дела";
		$projects['static']['field_lang_ru']['title'] = "New projects";
		$projects['static']['field_lang_kh']['title'] = "переовод:KH";
		$projects['static']['field_lang_mns']['title'] = "Перевод:MNS";
		$projects['widget'] =_go2json_glue_page('projects');
		$projects['filter_menu'] = _go2json_get_taxonomy_vocabulary('menu_projects');
		$projects['seo']["field_lang_en"]['title'] = "NEW Projects";
		$projects['seo']["field_lang_ru"]['title'] = "Новые дела";
		$projects['seo']["field_lang_ru"]['description'] = "Премьерные постановки театра СОЛНЦЕ";
		$projects['seo']["field_lang_en"]['description'] = "premier thetre SUN";
	}
	

 
	
	$replace = json_encode($projects, JSON_HEX_QUOT);
	
	//$replace = str_replace("\u0022","!!!",$replace);
	//\u0022
	//echo $replace;
	//exit();
	$projects = json_decode($replace);
	return $projects;
}

/**
 * Get a node by ID and return (modified by hook) data
 * 
 * @uses     Drupal Hook to modify the node to custom format
 * @example  function mymodule_go2json_get_node($node) {
 *             $node_array = array();
 *             $node_array['id'] = $node->nid;
 *             $node_array['title'] = $node->title;
 *         
 *             return $node_array;
 *           }
 * @param int $id
 * @return object|array
 */
function _go2json_get_node($id) {
  //$node = node_load( $id );
  $node = node_load( $id );
  $node = (array)$node;
  // Check if the node exists
  if ($node == FALSE) {
    drupal_add_http_header('Status', '404', $append = FALSE);
    return _go2json_get_error_message_content_inexistent('node', $id);
  }
  else {
    // Check permissions
    if (node_access( 'view', $node ) != TRUE) {
      return _go2json_get_error_message_permission( 'node', $id );
    }
  }
  
  // Make hook available
  $node_array = module_invoke_all( "go2json_get_node", $node );
  if (is_array( $node_array ) && ! empty( $node_array )) {
    $node = $node_array;
  }
  $node["field_project_people"]["und"][0]["safe_value"] = "null";

  return $node;
}

/**
 * Get a comment by ID and return (modified by hook) data
 * 
 * @uses     Drupal Hook to modify the comment to custom format
 * @example  function mymodule_go2json_get_comment($comment) {
 *             $comment_array = array();
 *             $comment_array['id'] = $comment->cid;
 *             $comment_array['name'] = $comment->name;
 *         
 *             return $comment_array;
 *           }
 * @param int $id
 * @return object|array
 */
function _go2json_get_comment($id) {
  
  
  // Check permissions
  // Make hook available
  $comment_array = module_invoke_all( "go2json_get_comment", $comment );
  if (is_array( $comment_array ) && ! empty( $comment_array )) {
    $comment = $comment_array;
  }
  
  return $comment;
}


function _go2json_microtime() {
	
	$time = file_get_contents('timecache', true);
	$delta_time = microtime(true);
	
	$result =  $delta_time - $time; 
	//echo $result;
	
	//exit();
	
	$a = date('d', $time);
	$b = date('d', $delta_time);
	
	
	if ($b==$a){ 
		return true;
	}

return false;
	
}


function _go2json_glue_page($link) {
$out = array();

$ru = json_decode(file_get_contents('http://toun.ru/content/ru/' . $link), true);
$ru2 = $ru["items"];

$en = json_decode(file_get_contents('http://toun.ru/content/en/' . $link), true);
$en2 = $en["items"];

$kh = json_decode(file_get_contents('http://toun.ru/content/kh/' . $link), true);
$kh2 = $kh["items"];

$mns = json_decode(file_get_contents('http://toun.ru/content/mns/' . $link), true);
$mns2 = $mns["items"];


$i=1;
foreach ($ru2 as $value) {
	
	$out[$i]['field_lang_ru'] = $value;
	$i++;
}

$i=1;
foreach ($en2 as $value) {
	
	$out[$i]['field_lang_en'] = $value;
	$i++;
}

$i=1;
foreach ($kh2 as $value) {
	
	$out[$i]['field_lang_kh'] = $value;
	$i++;
}


$i=1;
foreach ($mns2 as $value) {
	
	$out[$i]['field_lang_mns'] = $value;
	$i++;
}
 
 	
 
 
 
 return $out;

}



function _go2json_glue($link) {
$out = array();

$ru = json_decode(file_get_contents('http://toun.ru/content/ru/' . $link), true);
$ru2 = $ru["items"];

$en = json_decode(file_get_contents('http://toun.ru/content/en/' . $link), true);
$en2 = $en["items"];

$kh = json_decode(file_get_contents('http://toun.ru/content/kh/' . $link), true);
$kh2 = $kh["items"];

$mns = json_decode(file_get_contents('http://toun.ru/content/mns/' . $link), true);
$mns2 = $mns["items"];


$i=1;
foreach ($ru2 as $value) {
	
	$out[$i]['field_lang_ru'] = $value;
	$i++;
}

$i=1;
foreach ($en2 as $value) {
	
	$out[$i]['field_lang_en'] = $value;
	$i++;
}

$i=1;
foreach ($kh2 as $value) {
	
	$out[$i]['field_lang_kh'] = $value;
	$i++;
}


$i=1;
foreach ($mns2 as $value) {
	
	$out[$i]['field_lang_mns'] = $value;
	$i++;
}
 
 return $out;

}

////
function _go2json_get_status_cache($file) {
	$cache = md5(file_get_contents('http://toun.ru/content/cache-change'));
	$request = file_get_contents($file, true);
	setcookie("update", $cache, time()+86400);
	if ($request === $cache) {
	return true;
  
}
file_put_contents($file, $cache);
return false;
}
/////
function _go2json_perfomance($id) {
 //$node = node_load( $id );
  $node = node_load( $id );


$cids = comment_get_thread($node, 'COMMENT_PUBLISHED', 100);
$coms = comment_load_multiple($cids);


  $node = (array)$node;
  // Check if the node exists
  if ($node == FALSE) {
    drupal_add_http_header('Status', '404', $append = FALSE);
    //return _go2json_get_error_message_content_inexistent('node', $id);
  }
  else {
    // Check permissions
    if (node_access( 'view', $node ) != TRUE) {
     // return _go2json_get_error_message_permission( 'node', $id );
    }
  }
  
  // Make hook available
  $node_array = module_invoke_all( "go2json_get_node", $node );
  if (is_array( $node_array ) && ! empty( $node_array )) {
    $node = $node_array;
  }
  
  //var_dump($node);
//exit();  
  $out['page'] = $node;
  $out['seo']["field_lang_en"]['title'] = $node["field_title_header"]["en"][0]["value"];
  $out['seo']["field_lang_ru"]['title'] = $node["field_title_header"]["ru"][0]["value"];
  $out['seo']["field_lang_ru"]['description'] = $node["field_description_perfomance"]["ru"][0]["value"];
  $out['seo']["field_lang_en"]['description'] = $node["field_description_perfomance"]["en"][0]["value"];
  
  $out['page']['static']['field_lang_ru']['send_button']="Отправить";
  $out['page']['static']['field_lang_en']['send_button']="Send";
  $out['page']['static']['field_lang_ru']['review_title']="Оставить отзыв";
  $out['page']['static']['field_lang_en']['review_title']="Send review";
  $out['page']['static']['field_lang_ru']['placeholder_text']="Ваше сообщение";
  $out['page']['static']['field_lang_en']['placeholder_text']="You message";
  $out['page']['static']['field_lang_ru']['placeholder_name']="Ваше Имя и Фамилия";
  $out['page']['static']['field_lang_en']['placeholder_name']="You Name";
  
  // comment_node_load( $id, );
  $out['comments'] = comment_view_multiple($coms, $node);
  return  $out;
 
}


function _go2json_festival($id) {
 //$node = node_load( $id );
  $node = node_load( $id );
// если нужно ддобавить новый фестиваль то это делается так: меню загружается из термина таксономи по id, а у  фестиваля будет сортивка по терминам таксонмии. и у каждого свое меню

$cids = comment_get_thread($node, 'COMMENT_PUBLISHED', 100);
$coms = comment_load_multiple($cids);


  $node = (array)$node;
  // Check if the node exists
  if ($node == FALSE) {
    drupal_add_http_header('Status', '404', $append = FALSE);
    //return _go2json_get_error_message_content_inexistent('node', $id);
  }
  else {
    // Check permissions
    if (node_access( 'view', $node ) != TRUE) {
     // return _go2json_get_error_message_permission( 'node', $id );
    }
  }
  
  // Make hook available
  $node_array = module_invoke_all( "go2json_get_node", $node );
  if (is_array( $node_array ) && ! empty( $node_array )) {
    $node = $node_array;
  }
  
  //var_dump($node);
//exit();  
  $out['page'] = $node;
  $out['seo']["field_lang_en"]['title'] = $node["field_title_header"]["en"][0]["value"];
  $out['seo']["field_lang_ru"]['title'] = $node["field_title_header"]["ru"][0]["value"];
  $out['seo']["field_lang_ru"]['description'] = $node["field_description_festival"]["ru"][0]["value"];
  $out['seo']["field_lang_en"]['description'] = $node["field_description_festival"]["en"][0]["value"];
  
  $out['page']['static']['field_lang_ru']['send_button']="Отправить";
  $out['page']['static']['field_lang_en']['send_button']="Send";
  $out['page']['static']['field_lang_ru']['review_title']="Оставить отзыв";
  $out['page']['static']['field_lang_en']['review_title']="Send review";
  $out['page']['static']['field_lang_ru']['placeholder_text']="Ваше сообщение";
  $out['page']['static']['field_lang_en']['placeholder_text']="You message";
  $out['page']['static']['field_lang_ru']['placeholder_name']="Ваше Имя и Фамилия";
  $out['page']['static']['field_lang_en']['placeholder_name']="You Name";
  
  // comment_node_load( $id, );
  $out['comments'] = comment_view_multiple($coms, $node);
  $out['filter_menu'] = _go2json_get_taxonomy_vocabulary('menu_projects');
  return  $out;
 
}







function _go2json_first_request( $id ) {

if ($id === "frontpage"){	


if (_go2json_microtime()===true && _go2json_get_status_cache('frontchek')===true)
	


{
	$request = json_decode(file_get_contents('frontcache', true));
	
} else {
	$lang = array();
	$month = mb_strtolower(date("M"));
	$next_month = mb_strtolower(date("M", strtotime("+1 month")));
	
	$xru = "bootstrap_langru" . $month;
	$xen = "bootstrap_langen" . $month;
	$xkh = "bootstrap_langkh" . $month;
	$xmns = "bootstrap_langmns" . $month;

	$lang['first_month']['ru']= theme_get_setting($xru);
	$lang['first_month']['en']= theme_get_setting($xen);
	$lang['first_month']['kh']= theme_get_setting($xkh);
	$lang['first_month']['mns']= theme_get_setting($xmns);
	
	$xru = "bootstrap_langru" . $next_month;
	$xen = "bootstrap_langen" . $next_month;
	$xkh = "bootstrap_langkh" . $next_month;
	$xmns = "bootstrap_langmns" . $next_month;
	
	$lang['second_month']['ru']=theme_get_setting($xru);
	$lang['second_month']['en']=theme_get_setting($xen);
	$lang['second_month']['kh']=theme_get_setting($xkh);
	$lang['second_month']['mns']=theme_get_setting($xmns);
	
	
	$request = array();
	$request['header'] = _go2json_get_head();
	$request['lenta'] = _go2json_get_lenta();
	
	$request['seo']["field_lang_en"]['title'] = "Theatre SUN";
  $request['seo']["field_lang_ru"]['title'] = "Театр солнце";
  $request['seo']["field_lang_ru"]['description'] = "";
  $request['seo']["field_lang_en"]['description'] = "";
 
	
	$request['2-day']['widget'] = _go2json_glue("widget-afisha-2-day");
	$request['2-day']['static']['field_lang_ru']['title'] = theme_get_setting('bootstrap_langru2day');
	$request['2-day']['static']['field_lang_en']['title'] = theme_get_setting('bootstrap_langen2day');
	$request['2-day']['static']['field_lang_kh']['title'] = theme_get_setting('bootstrap_langkh2day');
	$request['2-day']['static']['field_lang_mns']['title'] = theme_get_setting('bootstrap_langmns2day');
	
	$request['afisha']['widget']['first_month']  = _go2json_glue("widget-afisha-1");
	
		
	$request['afisha']['static']['first_month']['field_lang_ru']['title'] = $lang['first_month']['ru'];
	$request['afisha']['static']['first_month']['field_lang_en']['title'] = $lang['first_month']['en'];
	$request['afisha']['static']['first_month']['field_lang_kh']['title'] = $lang['first_month']['kh'];
	$request['afisha']['static']['first_month']['field_lang_mns']['title'] = $lang['first_month']['mns'];
	
	$request['afisha']['static']['field_lang_ru']['all'] = "Посмотреть афишу полностью";
	$request['afisha']['static']['field_lang_en']['all'] = "view all";
	$request['afisha']['static']['link'] = "/afisha";
	
	$request['afisha']['widget']['second_month']  = _go2json_glue("widget-afisha-2");
		
	$request['afisha']['static']['second_month']['field_lang_ru']['title'] = $lang['second_month']['ru'];
	$request['afisha']['static']['second_month']['field_lang_en']['title'] = $lang['second_month']['en'];
	$request['afisha']['static']['second_month']['field_lang_kh']['title'] = $lang['second_month']['kh'];
	$request['afisha']['static']['second_month']['field_lang_mns']['title'] = $lang['second_month']['mns'];
	
	$request['news']['widget']  = _go2json_glue("widget-list-news");
	$request['news']['static']['field_lang_ru']['title'] = "Новости";
	$request['news']['static']['field_lang_en']['title'] = "News";
	$request['news']['static']['field_lang_kh']['title'] = "навста";
	$request['news']['static']['field_lang_mns']['title'] = "навсты";
	$request['news']['static']['field_lang_ru']['more'] = "Подробнее";
	$request['news']['static']['field_lang_en']['more'] = "More";
	$request['news']['static']['field_lang_ru']['other'] = "Другие новости театра";
	$request['news']['static']['field_lang_en']['other'] = "Other news teatre";
	$request['news']['static']['field_lang_ru']['other'] = "Другие новости театра";
	$request['news']['static']['link'] = "/news";
	
	
	
	
	$reccache = json_encode($request);
	file_put_contents('frontcache', $reccache);
	$time = microtime(true);
	file_put_contents('timecache', $time);
	_go2json_get_status_cache('frontchek');

}


return $request;
}


	if ($id === "global"){
	
	$out['settings'] = _go2json_get_theme_setting();
	$out['menu'] = _go2json_get_taxonomy_vocabulary('menu');
	$out['footer'] = _go2json_get_footer();
	
	}
	
	
	return $out;
}















/**
 * Get a menu by ID (machine-name) and return (modified by hook) data
 *
 * @uses     Drupal Hook to modify the menu to custom format
 * @example  function mymodule_go2json_get_menu($menu-name) {
 *             $menu_array = array();
 *             $menu_array['id'] = $menu->cid;
 *             $menu_array['name'] = $menu->name;
 *
 *             return $menu_array;
 *           }
 * @param string $id
 * @return object|array
 */
function _go2json_get_menu($id) {
  $menu = menu_tree_all_data( $id );
  // Check permissions
  if (user_access( 'access content' ) != TRUE) {
    return _go2json_get_error_message_permission( 'menu', $id );
  }

  // Make hook available
  $menu_array = module_invoke_all( "go2json_get_menu", $menu );
  if (is_array( $menu_array ) && ! empty( $menu_array )) {
    $menu = $menu_array;
  }
 ///print_r($menu);
  return $menu;
}

/**
 * Get a taxonomy_term by ID and return (modified by hook) data
 * 
 * @uses     Drupal Hook to modify the taxonomy_term to custom format
 * @example  function mymodule_go2json_get_taxonomy_term($taxonomy_term) {
 *             $taxonomy_term_array = array();
 *             $taxonomy_term_array['id'] = $taxonomy_term->tid;
 *             $taxonomy_term_array['name'] = $taxonomy_term->name;
 *         
 *             return $taxonomy_term_array;
 *           }
 * @param int $id
 * @return object|array
 */
function _go2json_get_taxonomy_term($id) {
  $taxonomy_term = taxonomy_term_load($id);
  
  // Make hook available
  $taxonomy_term_array = module_invoke_all( "go2json_get_taxonomy_term", $taxonomy_term );
  if (is_array( $taxonomy_term_array ) && ! empty( $taxonomy_term_array )) {
    $taxonomy_term = $taxonomy_term_array;
  }
  
  return $taxonomy_term;
}

/**
 * Get a taxonomy_vocabulary by ID and return (modified by hook) data
 * 
 * @uses     Drupal Hook to modify the taxonomy_vocabulary to custom format
 * @example  function mymodule_go2json_get_taxonomy_vocabulary($taxonomy_vocabulary) {
 *             $taxonomy_vocabulary_array = array();
 *             $taxonomy_vocabulary_array['id'] = $taxonomy_vocabulary->vid;
 *             $taxonomy_vocabulary_array['name'] = $taxonomy_vocabulary->name;
 *         
 *             return $taxonomy_vocabulary_array;
 *           }
 * @param int $id
 * @return object|array
 */
 
 function onix_reportes_build_tree($flatTree){
	$tree = array();
	$last_term_stack = array();
	foreach ($flatTree as &$term) {
		while(count($last_term_stack) > 0){
			if(in_array(end($last_term_stack)->tid, $term->parents)) {
					$lastTerm = end($last_term_stack);
					$lastTerm->children[]=$term;
					array_push($last_term_stack,$term);
					break;
				} else {
					array_pop($last_term_stack);
				}
		}
		if(empty($last_term_stack)){
			$tree[] =$term;
			array_push($last_term_stack, $term);
		} 
	}
	return $tree;
} 
 
 
function _go2json_get_taxonomy_vocabulary($id) {
  $taxonomy_vocabulary = taxonomy_vocabulary_machine_name_load($id);
  //$taxonomy_vocabulary2 = taxonomy_get_tree($taxonomy_vocabulary->vid);
  $tree = taxonomy_get_tree($taxonomy_vocabulary->vid, $parent = 0, $max_depth = NULL, $load_entities = TRUE);
  // Make hook available
  
  $tree = onix_reportes_build_tree($tree);

  
  return $tree;
  
  
 // $vocabularies = taxonomy_vocabulary_load($id);
 /// return reset($vocabularies);
}

/**
 * Get a custom_data by ID and return (modified by hook) data
 * 
 * @uses     Drupal Hook to modify the custom_data to custom format
 * @example  function mymodule_go2json_get_custom_data($custom_data) {
 *             $custom_data_array = array();
 *             $custom_data_array['id'] = 0;
 *             $custom_data_array['title'] = "example";
 *         
 *             return $custom_data_array;
 *           }
 * @return FALSE|array
 */
function _go2json_get_custom_data() {
  $custom_data = FALSE;
  
  // Make hook available
  $custom_data_array = module_invoke_all( "go2json_get_custom_data", $custom_data );
  if (is_array( $custom_data_array ) && ! empty( $custom_data_array )) {
    $custom_data = $custom_data_array;
  }
  
  return $custom_data;
}

function _go2json_get_theme_setting() {
$theme_setting['site_name'] = variable_get('site_name', "Default site name");
$theme_setting['favicon'] = theme_get_setting('favicon');

$theme_setting['phone_first'] = theme_get_setting('bootstrap_phone_first');
$theme_setting['phone_second'] = theme_get_setting('bootstrap_phone_second');
$theme_setting['field_lang_en']['logo_vertical'] = theme_get_setting('bootstrap_en_logo2');
$theme_setting['field_lang_en']['logo_vertical_invert'] = theme_get_setting('bootstrap_en_logo_invert2');
$theme_setting['field_lang_ru']['logo_vertical'] = theme_get_setting('bootstrap_ru_logo2');
$theme_setting['field_lang_ru']['logo_vertical_invert'] = theme_get_setting('bootstrap_ru_logo_invert2');




  return $theme_setting;
}

function _go2json_get_footer() {
$footer['mail'] = theme_get_setting('bootstrap_mail');
$footer['link_vk'] = theme_get_setting('bootstrap_link_vk');
$footer['link_facebook'] = theme_get_setting('bootstrap_link_facebook');
$footer['link_youtube'] = theme_get_setting('bootstrap_link_youtube');
$footer['link_instagram'] = theme_get_setting('bootstrap_link_instagram');
$footer['field_lang_ru']['adress_footer'] = theme_get_setting('bootstrap_ru_adress_footer');	
$footer['field_lang_en']['adress_footer'] = theme_get_setting('bootstrap_en_adress_footer');
return $footer;
}



function _go2json_get_head() {
$head['field_lang_ru']['adress_head'] = theme_get_setting('bootstrap_ru_adress_head');
$head['field_lang_ru']['slogan_top'] = theme_get_setting('bootstrap_ru_slogan_top');
$head['field_lang_en']['slogan_top'] = theme_get_setting('bootstrap_en_slogan_top');
$head['field_lang_en']['adress_head'] = theme_get_setting('bootstrap_en_adress_head');

$head['field_lang_ru']['eyesight'] = theme_get_setting('bootstrap_ru_eyesight');
$head['field_lang_en']['eyesight'] = theme_get_setting('bootstrap_en_eyesight');
$head['bootstrap_eyesight_link'] = theme_get_setting('bootstrap_eyesight_link');

$head['field_lang_en']['logo_horisontal'] = theme_get_setting('bootstrap_en_logo1');
$head['field_lang_en']['logo_horisontal_invert'] = theme_get_setting('bootstrap_en_logo_invert1');
$head['field_lang_ru']['logo_horisontal'] = theme_get_setting('bootstrap_ru_logo1');
$head['field_lang_ru']['logo_horisontal_invert'] = theme_get_setting('bootstrap_ru_logo_invert1');



$head['field_lang_ru']['title_map'] = theme_get_setting('bootstrap_ru_title_map');
$head['field_lang_en']['title_map'] = theme_get_setting('bootstrap_en_title_map');
$head['sun_link'] = "/video";
return $head;
}


function _go2json_get_lenta() {
    
$lenta['video_lenta_mp4'] = theme_get_setting('bootstrap_video_lenta_mp4');
$lenta['video_lenta_webm'] = theme_get_setting('bootstrap_video_lenta_webm');
$lenta['video_lenta_ogv'] = theme_get_setting('bootstrap_video_lenta_ogv');
$lenta['video_lenta_jpg'] = theme_get_setting('bootstrap_video_lenta_jpg');
$lenta['video_lenta_link'] = theme_get_setting('bootstrap_video_lenta_link');

  return $lenta;
}



/**
 * Return an error message when the user doesn't have any permissions for the content
 * 
 * @param string $type
 * @return array
 */
function _go2json_get_error_message_permission($type, $id) {
  return array(
    "error" => t( "You don't have any permissions to view this content. The arguments were (@type) and (@id)", array(
      "@type" => $type, 
      "@id" => $id 
    ) ) 
  );
}

/**
 * Return an error message when the wrong type has been passed through
 * 
 * @param string $type
 * @return array
 */
function _go2json_get_error_message_type($type) {
  drupal_add_http_header('Status', '404', $append = FALSE);
  return array(
    "error" => t( "No valid content type given to go2json callback. The argument was (@type)", array(
      "@type" => $type 
    ) ) 
  );
}

/**
 * Return an error message when data is FALSE (probably because of wrong id)
 * 
 * @param int $id
 * @return array
 */
function _go2json_get_error_message_id($id) {
  drupal_add_http_header('Status', '404', $append = FALSE);
  return array(
    "error" => t( "The given ID didn't contain any return data. The argument was (@id)", array(
      "@id" => $id 
    ) ) 
  );
}

/**
 * Return an error message when the content doesn't exist
 *
 * @param string $type
 * @return array
 */
function _go2json_get_error_message_content_inexistent($type, $id) {
  return array(
    "error" => t( "The content doesn't exist. The arguments were (@type) and (@id)", array(
        "@type" => $type,
        "@id" => $id
      )
    )
  );
}
